
# Base Builder
FROM debian:bookworm-slim AS base-builder

ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies in einem Layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        gnupg \
        build-essential \
        openjdk-17-jdk-headless \
        ffmpeg \
        git \
        cmake \
        g++ \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libv4l-dev \
        libxvidcore-dev \
        libx264-dev \
        libgtk-3-dev \
        libatlas-base-dev \
        gfortran \
        python3-venv && \
    curl -fsSL https://deb.nodesource.com/setup_21.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app


# Python Client Generator
FROM base-builder AS client-generator

WORKDIR /app/tagging-dashboard

COPY requirements.txt ./

RUN python3 -m venv venv && \
    ./venv/bin/pip install --no-cache-dir --upgrade pip setuptools wheel && \
    ./venv/bin/pip install --no-cache-dir -r requirements.txt

COPY generateTypscriptRestClient.py ./
COPY app ./app

RUN java --version
RUN ./venv/bin/python generateTypscriptRestClient.py


# Frontend Builder
FROM base-builder AS frontend-builder

ARG VITE_BASE_PATH
ARG VITE_API_PATH=/api/v1
ARG VITE_WS_PATH=/api/v1/ws
ENV VITE_BASE_PATH=${VITE_BASE_PATH}
ENV VITE_API_PATH=${VITE_API_PATH}
ENV VITE_WS_PATH=${VITE_WS_PATH}

WORKDIR /app/tagging-dashboard/app.ui

# Copy generated OpenAPI client
COPY --from=client-generator /app/tagging-dashboard/openapi.json ../openapi-spec.json
COPY --from=client-generator /app/tagging-dashboard/app.ui/services/restclient/ ./services/restclient/

# Copy frontend package files and install dependencies
COPY app.ui/package*.json ./
RUN npm install

# Copy rest of frontend
COPY app.ui/ ./

RUN npx vite build --mode production

# ============================
# Streamdeck Builder
# ============================
FROM base-builder AS streamdeck-builder

WORKDIR /app/tagging-dashboard/streamdeck

COPY streamdeck/package*.json ./
RUN npm install -g @elgato/cli && \
    npm install

COPY streamdeck/ ./

RUN npm run build && \
    npm run bundle

# Final Export Stage
FROM debian:bookworm-slim AS final-export

# Export generated artifacts
COPY --from=frontend-builder /app/tagging-dashboard/app/static /export/frontend-dist
COPY --from=client-generator /app/tagging-dashboard/app.ui/services/restclient /export/restclient
COPY --from=streamdeck-builder /app/tagging-dashboard/streamdeck/*.streamDeckPlugin /export/streamdeck-plugin/

CMD ["echo", "Build artifacts are ready in /export"]



# Build with:
# docker build -f Dockerfile.build  --target final-export -t tagging-build-image .
# docker create --name temp-container tagging-build-image
# docker cp temp-container:/export/frontend-dist ./app/static
# docker cp temp-container:/export/streamdeck-plugin/. ./
# docker rm temp-container