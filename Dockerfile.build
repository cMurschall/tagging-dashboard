
FROM debian:bookworm-slim AS base-builder

ENV DEBIAN_FRONTEND=noninteractive


RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    gnupg \
    build-essential \
    openjdk-17-jdk-headless \
    ffmpeg \
    git \
    && rm -rf /var/lib/apt/lists/* # Clean up apt cache to reduce image size


RUN curl -fsSL https://deb.nodesource.com/setup_21.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    rm -rf /var/lib/apt/lists/* # Clean up apt cache again


WORKDIR /app
RUN git clone -b master https://github.com/cMurschall/tagging-dashboard.git tagging-dashboard

WORKDIR /app/tagging-dashboard




FROM python:3.11-slim-bookworm AS backend-deps-installer


COPY --from=base-builder /app/tagging-dashboard /app/tagging-dashboard
WORKDIR /app/tagging-dashboard


RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    cmake \
    g++ \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*


RUN python3 -m venv venv


RUN . venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# client-generator
FROM backend-deps-installer AS client-generator

RUN apt-get update && \
    apt-get install -y --no-install-recommends openjdk-17-jdk-headless && \
    rm -rf /var/lib/apt/lists/*


RUN java --version
RUN . venv/bin/activate && \
    python3 generateTypscriptRestClient.py


# frontend-builder
FROM base-builder AS frontend-builder

COPY --from=client-generator /app/tagging-dashboard/openapi.json /app/tagging-dashboard/openapi-spec.json
COPY --from=client-generator /app/tagging-dashboard/app.ui/services/restclient/ /app/tagging-dashboard/app.ui/services/restclient/

# Change working directory to the frontend application's root.
WORKDIR /app/tagging-dashboard/app.ui


RUN npm install


RUN npx vite build --mode production


# streamdeck-builder
FROM base-builder AS streamdeck-builder

WORKDIR /app/tagging-dashboard/streamdeck

RUN npm install -g @elgato/cli

RUN npm install

# Bundle the Streamdeck plugin into its final '.streamDeckPlugin' file.
RUN npm run build
RUN npm run bundle


# final-export
FROM debian:bookworm-slim AS final-export


COPY --from=frontend-builder /app/tagging-dashboard/app/static /export/frontend-dist
COPY --from=client-generator /app/tagging-dashboard/app.ui/services/restclient /export/restclient
COPY --from=streamdeck-builder /app/tagging-dashboard/streamdeck/*.streamDeckPlugin /export/streamdeck-plugin/



# Build with:
# docker build -f Dockerfile.build  --target final-export -t tagging-build-image .
# docker create --name temp-container tagging-build-image
# docker cp temp-container:/export/frontend-dist ./app/static
# docker rm temp-container